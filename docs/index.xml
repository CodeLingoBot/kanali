<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Kanali</title>
    <link>/docs/</link>
    <description>Recent content in Docs on Kanali</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Apr 2017 16:41:54 +0100</lastBuildDate>
    
	<atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Configuration</title>
      <link>/docs/v2/configuration/</link>
      <pubDate>Mon, 10 Apr 2017 16:41:54 +0100</pubDate>
      
      <guid>/docs/v2/configuration/</guid>
      <description>Introduction The goal of this section is to provide an introduction to each of Kanali&amp;rsquo;s configurable resources. More in depth documentation for each resource can be found here.

The ApiProxy Resource This resource declaratively defines how your upstream services are reached. There are 3 main sections that can be configured for this resource.
source how your proxy will be accessible
target how your upstream service will be reached</description>
    </item>
    
    <item>
      <title>Error Codes</title>
      <link>/docs/v2/errorcodes/</link>
      <pubDate>Mon, 10 Apr 2017 16:41:54 +0100</pubDate>
      
      <guid>/docs/v2/errorcodes/</guid>
      <description> Introduction If you&amp;rsquo;re visiting this page, changes are that Kanali has given you a response similar to this one:
{ &amp;quot;status&amp;quot;: 404, &amp;quot;message&amp;quot;: &amp;quot;No ApiProxy resource was not found that matches the request.&amp;quot;, &amp;quot;code&amp;quot;: 0, &amp;quot;details&amp;quot;: &amp;quot;Visit https://kanali.io/docs/errorcodes for more details.&amp;quot; }  As promised in that response, the table below contains detailed information about each unique error code.
Details    Code Status Description     00 404 coming soon   01 500 coming soon   02 404 coming soon   03 500 coming soon   04 500 coming soon   05 500 coming soon   06 500 coming soon   07 500 coming soon   08 502 coming soon   09 500 coming soon   10 500 coming soon   11 500 coming soon   12 500 coming soon   13 403 coming soon   14 401 coming soon   15 429 coming soon    </description>
    </item>
    
    <item>
      <title>Tools</title>
      <link>/docs/v2/tools/</link>
      <pubDate>Mon, 10 Apr 2017 16:41:16 +0100</pubDate>
      
      <guid>/docs/v2/tools/</guid>
      <description> Coming soon </description>
    </item>
    
    <item>
      <title>Flags</title>
      <link>/docs/v2/flags/</link>
      <pubDate>Mon, 10 Apr 2017 16:43:08 +0100</pubDate>
      
      <guid>/docs/v2/flags/</guid>
      <description>Usage Each of the following flags can be set to a custom value. Values can also be set via environment variables and configuration files. The name of the corresponding environment variable is documented below. The order of precedence is as follows (each item has precedence over the item below it):
Flag Environment Variable Config file
To illustrate an example, let&amp;rsquo;s assume we have a config.toml with the following value:</description>
    </item>
    
    <item>
      <title>Plugins</title>
      <link>/docs/v2/plugins/</link>
      <pubDate>Mon, 10 Apr 2017 16:43:08 +0100</pubDate>
      
      <guid>/docs/v2/plugins/</guid>
      <description> Coming Soon </description>
    </item>
    
    <item>
      <title>Security</title>
      <link>/docs/v2/security/</link>
      <pubDate>Mon, 10 Apr 2017 16:43:08 +0100</pubDate>
      
      <guid>/docs/v2/security/</guid>
      <description> foo </description>
    </item>
    
    <item>
      <title>Deployment</title>
      <link>/docs/v2/deployment/</link>
      <pubDate>Mon, 10 Apr 2017 16:41:54 +0100</pubDate>
      
      <guid>/docs/v2/deployment/</guid>
      <description>Helm  This is the recommended deployment option.
 Helm is a package manager for Kubernetes. Helm makes it easy to deploy all the components of an application and its dependencies.
Kanali&amp;rsquo;s Helm chart can be found here. Before demonstrating how to use this chart, let&amp;rsquo;s bootstrap a local Kubernetes environment so that you can follow along.
# Start a local Kubernetes cluster. $ minikube start --kubernetes-version=v1.9.4 --feature-gates CustomResourceValidation=true # Update a potentially stale kubeconfig context.</description>
    </item>
    
  </channel>
</rss>