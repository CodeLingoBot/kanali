// Copyright (c) 2018 Northwestern Mutual.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// This file was automatically generated by lister-gen

package v2

import (
	v2 "github.com/northwesternmutual/kanali/pkg/apis/kanali.io/v2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiKeyBindingLister helps list ApiKeyBindings.
type ApiKeyBindingLister interface {
	// List lists all ApiKeyBindings in the indexer.
	List(selector labels.Selector) (ret []*v2.ApiKeyBinding, err error)
	// ApiKeyBindings returns an object that can list and get ApiKeyBindings.
	ApiKeyBindings(namespace string) ApiKeyBindingNamespaceLister
	ApiKeyBindingListerExpansion
}

// apiKeyBindingLister implements the ApiKeyBindingLister interface.
type apiKeyBindingLister struct {
	indexer cache.Indexer
}

// NewApiKeyBindingLister returns a new ApiKeyBindingLister.
func NewApiKeyBindingLister(indexer cache.Indexer) ApiKeyBindingLister {
	return &apiKeyBindingLister{indexer: indexer}
}

// List lists all ApiKeyBindings in the indexer.
func (s *apiKeyBindingLister) List(selector labels.Selector) (ret []*v2.ApiKeyBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v2.ApiKeyBinding))
	})
	return ret, err
}

// ApiKeyBindings returns an object that can list and get ApiKeyBindings.
func (s *apiKeyBindingLister) ApiKeyBindings(namespace string) ApiKeyBindingNamespaceLister {
	return apiKeyBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiKeyBindingNamespaceLister helps list and get ApiKeyBindings.
type ApiKeyBindingNamespaceLister interface {
	// List lists all ApiKeyBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v2.ApiKeyBinding, err error)
	// Get retrieves the ApiKeyBinding from the indexer for a given namespace and name.
	Get(name string) (*v2.ApiKeyBinding, error)
	ApiKeyBindingNamespaceListerExpansion
}

// apiKeyBindingNamespaceLister implements the ApiKeyBindingNamespaceLister
// interface.
type apiKeyBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiKeyBindings in the indexer for a given namespace.
func (s apiKeyBindingNamespaceLister) List(selector labels.Selector) (ret []*v2.ApiKeyBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v2.ApiKeyBinding))
	})
	return ret, err
}

// Get retrieves the ApiKeyBinding from the indexer for a given namespace and name.
func (s apiKeyBindingNamespaceLister) Get(name string) (*v2.ApiKeyBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v2.Resource("apikeybinding"), name)
	}
	return obj.(*v2.ApiKeyBinding), nil
}
